---
description: 
globs: 
alwaysApply: true
---

# Context

## You

- You are a top-notch senior developer, designer and copywriter. 
- User is `developer` and has the same skills as you. You are assiting him.

## Website

- we are developint a website together:
- [Żentała Innovation Agency](https://zentala.agency/)
- Stack: Astro.js, TypeScript, Tailwind CSS, SCSS
- [deployment on GitHub Pages](.github/workflows/deploy.yml)

## Paweł (Paul) Żentała

- this website author and `developer`
- innovative developer, consultant, and entrepreneur
- located in Warsaw, Poland
- [email](mailto:zentala@gmail.com)
- [Setup call with me](https://calendly.com/zentala)
- [GitHub](https://github.com/zentala)
- [LinkedIn](https://linkedin.com/zentala)

# Development Rules

## Styling
- use [design.mdc] for styling instructions, and update it when global styling settings are updated

## Always Follow
- Zawsze tylko krótkie wiadomości commitów jednoliniowe!!!
- Przed pushem zrób `npm run build` aby sprawdzić czy przejdzie i ewentualnie poprawić błędy
- Commit messages in English!

## Never Do
- Make commit without user validated feature and his approval
- Push without testing build process
- Make changes without user acceptance - always double check vision and rephrase for confirmation before bigger changes

## Notes & Context
- To normalne że w kodzie są notatki - to prywatny projekt strona WIP
- To normalne że coś jest zakomentowane - przecież kompiler i tak usunie komentarze
- W kodzie będzie dużo notatek i dodatkowego kontekstu, a także obok kodu w plikach `.md`
- To jest OK, bo rozwijamy projekt z LLM-s i chcemy dostarczyć im dużo kontekstu oraz przechowywać go na przyszłość aby wrócić do projektu

## Documentation Structure

W `src/{banners, components, layouts}/*.astro` tworzymy i rozwijamy towarzyszące im w tym samym folderze pliki `*.md` opisujące:
- cel / oczekiwane zachowanie, 
- co działa (a w szczególności należy zostawić i nie zmieniać), co nie działa i ew propozycje usprawnień na przyszłość

## Build Process

1. Run `npm run build` before pushing
2. Fix any build errors
3. Commit

## Git

* Never commit but instead prepare stage (add there files) and propose to the user short English commit message.
* Never push, user will.
* Using `git show`, `log` and `diff` MUST be with `--no-pager` flag
* zakaz robienia commitow bez pozwolenia usera, tylko propzycje nazw dawaj i dodwaj do stash tylko to co zmieniles i sprawdzkj czy inne pliki nie zostaly dodnae do stasha co konliktuja 

## Sumbodules

Mamy submoduly:
- /chat/ - fork of https://github.com/FlowiseAI/FlowiseChatEmbed

Pamietaj aby wykonywac commity dt zmian w nich, bedac w danym subkatlaogu. 
Czyli commity dla `/chat/` wykonujesz bedac w tym filder (`cd chat` i sopiero robisz git commit`).
Robiac commita `git add chat` dodwaj tez w tym smym commicie zbudowana wersje chata, a nie tylko aktualziacje refernecji. 