---
description: using design system / styling anything
globs: 
alwaysApply: false
---
# Design System Rules

## Podstawowe Zasady

### 1. Architektura Layoutu
- Każda strona MUSI używać struktury: `Header → Main → Footer`
- NIE używaj wrapperów które ograniczają całą stronę
- Poziome linie (border-b) MUSZĄ przechodzić przez całą szerokość ekranu
- Pionowe linie (border-x) TYLKO dla contentu wewnątrz sekcji

### 2. System Ramek 🔥 UPDATED
- **Główne ramki:** `border-gray-800`
- **Hover states:** `border-gray-700` 
- **Subtelne:** `border-gray-900`
- ❌ **NIGDY** nie używaj `-m-px` - zastąpiono przez `.cards-grid`
- ✅ **ZAWSZE** używaj `.cards-grid` dla layout kart w 3 kolumnach

### 3. Kolory
- **Tło:** `bg-black`
- **Tekst główny:** `text-white`
- **Tekst drugorzędny:** `text-gray-300` lub `text-gray-400`
- **NIE używaj innych kolorów** bez konsultacji

## Obowiązkowe Klasy CSS 🔥 UPDATED

### Container System
```scss
.container-bordered    // container + border-x + max-w-8xl
.container-padded     // container + border-x + p-16 + max-w-8xl
.container-header     // container + border-x + px-16 py-6 + max-w-8xl
.container-simple     // tylko container + max-w-8xl bez ramek
```

### Section System  
```scss
.section-full        // bg-black + border-b + w-full
.section-grid        // section-full + grid-pattern
```

### Card Grid System 🆕 NEW
```scss
.cards-grid          // inteligentny grid z auto-borders bez -m-px
  // Automatycznie dodaje:
  // - border-r między kartami w rzędzie
  // - border-t między rzędami
  // - usuwa końcowe ramki (3n, 2n, 1n)
  // - responsive breakpoints
```

### Card System 🔥 UPDATED
```scss
.card-item          // BEZ border - border dodaje .cards-grid
.card-link          // BEZ border - border dodaje .cards-grid
```

### Spacing System
```scss
.spacing-xs    // p-4
.spacing-sm    // p-8  
.spacing-md    // p-16
.spacing-lg    // p-24
.spacing-xl    // p-32
```

## Mandatory Structure 🔥 UPDATED

### Każda Strona
```html
<Layout title="Title">
  <Hero title="..." subtitle="..." />
  <section class="section-full">
    <div class="container-bordered">
      <!-- content -->
    </div>
  </section>
</Layout>
```

### Cards w Grid 🆕 NEW SYSTEM
```html
<section class="section-full">
  <div class="container-bordered">
    <div class="cards-grid">
      <!-- Z linkiem -->
      <a href="/link" class="card-link">
        <div class="p-16">Content</div>
      </a>
      
      <!-- Bez linka -->
      <div class="card-item">
        <div class="p-16">Content</div>
      </div>
    </div>
  </div>
</section>
```

### Hero Section
```html
<section class="section-grid text-white text-center">
  <div class="container-padded spacing-lg">
    <h1>Title</h1>
    <h2>Subtitle</h2>
  </div>
</section>
```

## Forbidden Practices 🔥 UPDATED

### ❌ NIE ROB TEGO:
```html
<!-- Inline Tailwind dla rzeczy które mają klasy -->
<div class="container mx-auto max-w-8xl border-x border-gray-800 p-16">

<!-- Stary system z -m-px -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 -m-px">

<!-- Karty z border gdy używasz .cards-grid -->
<div class="card-link border border-gray-800">

<!-- Wrapper ograniczający całą stronę -->
<div class="max-w-8xl mx-auto">
  <Header />
  <Main />
  <Footer />
</div>

<!-- Inne kolory ramek -->
<div class="border-gray-600">

<!-- Footer z border-t -->
<footer class="border-t border-gray-800">
```

### ✅ ROB TO:
```html
<!-- Używaj klas systemowych -->
<div class="container-padded">

<!-- Nowy system grid -->
<div class="cards-grid">

<!-- Karty BEZ border w .cards-grid -->
<div class="card-link">

<!-- Każdy komponent oddzielnie -->
<Header />
<Main />
<Footer />

<!-- Systemowe kolory -->
<div class="border-gray-800">

<!-- Footer BEZ border-t (sekcja ma border-b) -->
<footer class="bg-black text-white">
```

## Learningi z Refactoringu 🆕 UPDATED

### Problem z `-m-px`
❌ **Problem:** Grid z `-m-px` był o 2px szerszy niż container  
✅ **Rozwiązanie:** Nowy system `.cards-grid` z inteligentnym borderem

### Problem z podwójnymi liniami
❌ **Problem:** Sekcja `border-b` + Footer `border-t` = 2 linie  
✅ **Rozwiązanie:** Footer BEZ `border-t`, sekcje mają `border-b`

### Vertical Alignment Issue
❌ **Problem:** Header/Footer innej szerokości niż grid  
✅ **Rozwiązanie:** Wszystkie kontenery `max-w-8xl` tej samej szerokości

### Mobile UX Problems 🆕 NEW
❌ **Problem:** Ramki na mobile wyglądają źle, za duże paddingi  
✅ **Rozwiązanie:** Auto-responsive containers (border-x znika, padding się zmniejsza)

❌ **Problem:** Menu na mobile nieczytelne, za małe  
✅ **Rozwiązanie:** Hamburger menu poniżej 1000px z overlay

❌ **Problem:** Footer na mobile chaotyczny  
✅ **Rozwiązanie:** Responsive grid - About→Offer→Blogs na mobile

❌ **Problem:** Logo za duże na mobile  
✅ **Rozwiązanie:** `.responsive-logo` auto-skaluje się: 600px→350px→280px

## Development Rules 🔥 UPDATED

### Nowy Komponent
1. Sprawdź czy możesz użyć `.cards-grid` dla grid layoutów
2. NIE dodawaj border do kart jeśli używasz `.cards-grid`
3. Użyj naming convention: `component-variant` 
4. Zawsze dodaj hover states

### Nowa Strona z Kartami
1. Zacznij od `<Layout>`
2. Dodaj `<Hero>` jeśli potrzebne
3. Użyj `section-full` + `container-bordered`
4. Wewnątrz użyj `.cards-grid` (NIE zwykły grid z `-m-px`)

### Modyfikacje Ramek
1. ❌ **NIGDY** nie używaj `-m-px` w nowych komponentach
2. ❌ **NIGDY** nie dodawaj `border-t` do Footer
3. ✅ **ZAWSZE** używaj `.cards-grid` dla układów kart
4. Wszystkie zmiany MUSZĄ przejść przez build test

## Responsive Rules 🆕 MOBILE ENHANCED

### Mobile First Philosophy
- Projektuj najpierw na mobile
- `.cards-grid` automatycznie obsługuje responsive
- Używaj `md:` i `lg:` prefixów dla custom rzeczy
- ✅ **Ramki boczne automatycznie znikają poniżej 1450px**
- ✅ **Padding automatycznie zmniejsza się: 770px→24px, 480px→16px**
- ✅ **Hamburger menu poniżej 770px**

### Mobile Specific Features
- **1450px breakpoint:** Container borders disappear
- **770px breakpoint:** Hamburger menu + tablet spacing + footer reorganization
- **480px breakpoint:** Ultra-compact mobile experience

### Responsive Classes Available
```scss
// Container classes (auto-responsive) 🔥 UPDATED
.container-bordered     // border-x znika przy 1450px
.container-padded      // padding 64px→24px→16px responsive
.container-header      // padding 64px→24px→16px + py responsive

// Spacing classes (auto-responsive) 🔥 UPDATED
.spacing-xs, .spacing-sm, .spacing-md, .spacing-lg, .spacing-xl
// Automatycznie zmniejszają padding: 770px→24px, 480px→16px

// Mobile Navigation 🔥 UPDATED
.mobile-nav-toggle     // hamburger button (hidden above 770px)
.desktop-nav          // desktop navigation (hidden below 770px)
.mobile-nav           // mobile menu (no gaps, borders to edge)

// Mobile Footer
.footer-responsive-grid // reorganizes footer below 770px

// Responsive Logo
.responsive-logo       // auto-scales logo for mobile
```

### Breakpoints 🔥 UPDATED
```scss
// Mobile: <480px (ultra-compact, 16px padding)
// Tablet: 480px-770px (compact, 24px padding) 
// Desktop: >770px (full padding, mobile nav hidden)
// Container borders: >1450px (visible when space for container + margins)
```

## Performance Rules

### CSS
- ZAWSZE używaj `@layer components` dla custom klas
- NIE dodawaj zbędnych !important
- Unikaj deep nesting (max 3 poziomy)
- `.cards-grid` optymalizuje border rendering

### HTML
- Minimalizuj liczbę divów
- Używaj semantycznych tagów (`section`, `article`, `nav`)
- Zawsze dodawaj `alt` do obrazków

## Quality Gates

### Przed Commitem
1. `npm run build` MUSI przejść
2. Sprawdź responsywność na 3 rozmiarach
3. Sprawdź hover states
4. Sprawdź focus states (accessibility)
5. ✅ **Sprawdź pionowe linie** - czy są wyrównane Header/Footer/Content

### Code Review
- Czy używa systemowych klas?
- Czy respektuje strukturę layoutu?
- Czy ma proper hover/focus states?
- Czy jest responsive?
- ❌ **Czy NIE używa `-m-px`?**
- ✅ **Czy używa `.cards-grid` dla grid layoutów?**

Ten system jest OBOWIĄZKOWY dla wszystkich nowych komponentów i stron!

## Cheat Sheet - Quick Reference

### ✅ RESPONSIVE STRUCTURE (Current System!)
```html
<!-- Auto-responsive: borders disappear on mobile, padding adapts -->
<section class="section-full">
  <div class="container-bordered">
    <div class="cards-grid">
      <div class="card-link">
        <div class="padding-responsive-md">Content</div>  <!-- ✅ RESPONSIVE! -->
      </div>
    </div>
  </div>
</section>

<!-- Responsive header spacer - matches navbar height -->
<div class="header-spacer bg-black"></div>

<!-- Responsive logo on homepage -->
<div class="responsive-logo mx-auto">
  <img src="./logo.ext.svg" alt="Logo" />
</div>

<!-- Mobile navigation in header -->
<nav class="desktop-nav">Desktop Menu</nav>
<button class="mobile-nav-toggle">☰</button>
<div class="mobile-nav">Mobile Menu</div>

<!-- Responsive footer -->
<div class="footer-responsive-grid">
  <div class="footer-about">About</div>
  <div class="footer-offer">Offer</div>
  <div class="footer-blogs">Blogs</div>
</div>
```

### ✅ CURRENT STRUCTURE (Updated System)
```html
<section class="section-full">
  <div class="container-bordered">
    <div class="cards-grid">
      <div class="card-link">
        <div class="padding-responsive-md">Content</div> <!-- ✅ RESPONSIVE! -->
      </div>
    </div>
  </div>
</section>
```

### ❌ DON'T (Deprecated System)
```html
<!-- OLD: Static padding in cards -->
<div class="p-16">Content</div>

<!-- OLD: Grid with -m-px -->
<div class="grid grid-cols-3 -m-px">
  <div class="card-link border border-gray-800">
    <div class="p-16">Content</div>
  </div>
</div>

<!-- OLD: Fixed header spacer -->
<div class="h-20 bg-black"></div>
```

# Responsive Padding & Spacing System ✨ IMPROVED

## Gradual Scaling Philosophy 
**64px → 48px → 32px → 24px → 16px**

Płynne przejścia z więcej breakpointów zamiast gwałtownych skoków.

## Usage Classes

### All-around Padding (p)
- `.padding-responsive-xs` - desktop: 8px, tablet: 4px, mobile: 4px
- `.padding-responsive-sm` - desktop: 16px, medium: 12px, tablet: 12px, mobile: 8px  
- `.padding-responsive-md` - **64px → 48px → 32px → 24px → 16px** ⭐ Main class
- `.padding-responsive-lg` - 96px → 80px → 64px → 48px → 32px
- `.padding-responsive-xl` - 128px → 96px → 80px → 64px → 48px

### Horizontal Padding (px) - Headers/Footers
- `.px-responsive-xs` - desktop: 8px, tablet: 4px, mobile: 4px
- `.px-responsive-sm` - desktop: 24px, medium: 20px, tablet: 16px, mobile: 12px
- `.px-responsive-md` - **64px → 48px → 32px → 24px → 16px** ⭐ Container class
- `.px-responsive-lg` - 96px → 80px → 64px → 48px → 32px
- `.px-responsive-xl` - 128px → 96px → 80px → 64px → 48px

### Breakpoints Used:
- **>1440px**: Full desktop (64px+)
- **1000px-1440px**: Large desktop (48px) 
- **770px-1000px**: Medium desktop (32px)
- **480px-770px**: Tablet (24px)
- **<480px**: Mobile (16px)

### Vertical Padding (py)
- `.py-responsive-xs` - desktop: py-2, mobile: py-1
- `.py-responsive-sm` - desktop: py-4, tablet: py-3, mobile: py-2
- `.py-responsive-md` - desktop: py-8, tablet: py-6, mobile: py-4
- `.py-responsive-lg` - desktop: py-16, tablet: py-12, mobile: py-8
- `.py-responsive-xl` - desktop: py-24, tablet: py-16, mobile: py-12

### Gap & Spacing
- `.gap-responsive-sm` - desktop: gap-4, tablet: gap-3, mobile: gap-2
- `.gap-responsive-md` - desktop: gap-8, tablet: gap-6, mobile: gap-4
- `.gap-responsive-lg` - desktop: gap-12, tablet: gap-8, mobile: gap-6

### Space Between (for flex/nav)
- `.space-x-responsive-sm` - desktop: ml-4, tablet: ml-3, mobile: ml-2
- `.space-x-responsive-md` - desktop: ml-8, tablet: ml-6, mobile: ml-4
- `.space-x-responsive-lg` - desktop: ml-10, medium: ml-6, tablet: ml-8, mobile: ml-6

## Example Usage

```html
<!-- Footer with responsive padding -->
<footer class="bg-black">
  <div class="px-responsive-md py-responsive-md">
    <div class="grid gap-responsive-md">
      <!-- Content -->
    </div>
  </div>
</footer>

<!-- Nav with responsive spacing -->
<nav class="space-x-responsive-lg">
  <a href="/">Home</a>
  <a href="/about">About</a>
</nav>
```

## Integration with Existing System

### Prefer New Responsive Classes Over Static
✅ **Używaj responsywnych:** `.px-responsive-md` zamiast `.container-padded`  
✅ **Użyj dla większej kontroli:** `.padding-responsive-md` dla komponentów  
✅ **Idealne dla:** Navigation, footers, cards, any spacing

### Compatibility with Current System
- `.spacing-md` (static) vs `.padding-responsive-md` (responsive)
- `.container-padded` (static) vs `.px-responsive-md` (responsive) 
- Use responsive when you need mobile optimization
- Use static when consistent sizing is needed

## Development Guidelines

### When to Use Responsive Padding
1. **Headers/Footers** - użyj `.px-responsive-md`
2. **Card content** - użyj `.padding-responsive-md`  
3. **Navigation spacing** - użyj `.space-x-responsive-lg`
4. **Section gaps** - użyj `.gap-responsive-md`

### Migration from Static to Responsive
1. Sprawdź czy komponent potrzebuje mobile optimization
2. Zamień `.p-16` → `.padding-responsive-md`
3. Zamień `.px-16` → `.px-responsive-md`
4. Test na mobile (480px), tablet (770px), desktop (1440px+)

Ten system jest **komplementarny** do obecnego designu i daje większą kontrolę nad mobile UX! 🚀

# Header Height System ✨ NEW

## Problem Solved
Fixed header miał stały spacer `h-20` (80px), ale navbar ma responsive padding który się zmienia na różnych ekranach, powodując niezgodność.

## Solution - Responsive Header Spacer

### Header Height Variables
```scss
$header-content-height: 2.75rem; // ~44px for logo + text content
$header-height-desktop: calc(#{$header-content-height} + 3rem); // 92px total
$header-height-large: calc(#{$header-content-height} + 2.5rem);   // 84px total
$header-height-medium: calc(#{$header-content-height} + 2rem);    // 76px total
$header-height-tablet: calc(#{$header-content-height} + 1.5rem);  // 68px total
$header-height-mobile: calc(#{$header-content-height} + 1rem);    // 60px total
```

### Usage
```html
<!-- ❌ OLD: Fixed spacer -->
<div class="h-20 bg-black"></div>

<!-- ✅ NEW: Responsive spacer -->
<div class="header-spacer bg-black"></div>
```

### Mixin Available
```scss
@include header-height-spacer; // Auto responsive height matching navbar
```

## Benefits
- ✅ **Perfect alignment** - spacer zawsze pasuje do wysokości navbara
- ✅ **Mobile optimized** - mniejszy spacer na mobile (60px vs 80px)
- ✅ **Automatic scaling** - 92px → 84px → 76px → 68px → 60px
- ✅ **DRY principle** - jedna zmiana w variables.scss aktualizuje wszystko

## Implementation Status
- ✅ **Variables defined** in `variables.scss`
- ✅ **Mixin created** `@include header-height-spacer`
- ✅ **Class available** `.header-spacer`
- ✅ **Header.astro updated** to use responsive spacer
- ✅ **System tested** and working correctly




