---
import Logo from '../components/Logo.astro'
const headerLogoProps = {
  link: '/',
  color: '#fff',
  type: 'full',
  height: '40px',
  width: '200px',
  alt: 'Żentała',
}

const links = [
  { href: '/', text: 'Home' },
  // { href: '/mission', text: 'Mission' },
  // { href: '/about', text: 'About' },
  { href: '/offer', text: 'Offer' },
  // { href: '/faq', text: 'FAQ' },
  { href: '/portfolio', text: 'Portfolio' },
  { href: '/blog', text: 'Blog' },
  { href: '/contact', text: 'Contact' },
]
---

<style lang="scss">
  .tracking-wide {
    letter-spacing: 0.26rem;
  }

  // Animated Hamburger Menu
  .hamburger {
    @apply relative flex h-5 w-7 cursor-pointer flex-col justify-center;
    gap: 4px;

    // Hide on desktop
    @media (min-width: 771px) {
      @apply hidden;
    }

    .line {
      @apply w-full bg-white transition-all duration-300 ease-in-out;
      height: 3px; // Thicker lines
      transform-origin: center;
    }

    &.active {
      .line:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
      }

      .line:nth-child(2) {
        opacity: 0;
        transform: scaleX(0);
      }

      .line:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
      }
    }
  }

  // Mobile nav overlay
  .mobile-nav-overlay {
    @apply fixed hidden bg-black bg-opacity-80 transition-opacity duration-300;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 40; /* Above content but BELOW header (50) and mobile nav (1100) */

    &.active {
      @apply block;
    }

    @media (min-width: 771px) {
      display: none !important; /* Force hide on desktop */
    }
  }

  // Medium desktop nav adjustments
  .desktop-nav {
    // Hide first link (Home) on medium desktop
    @media (min-width: 771px) and (max-width: 999px) {
      a:first-child {
        @apply hidden;
      }
    }
  }

  @media (max-width: 1200px) {
    .logo-container {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
    }

    .text-lg {
      font-size: 0.82rem;
      margin-left: 0;
      margin-bottom: -4px;
      padding-bottom: 0;
      position: relative;
      top: -4px;
      opacity: 0.5;
    }

    nav {
      align-self: flex-end;
      margin-bottom: 7px;
    }
  }
</style>

<div class="header-spacer bg-black"></div>

<header
  id="header"
  class="fixed top-0 z-50 w-full border-b border-gray-800 bg-black bg-opacity-90 shadow-md backdrop-blur transition-all duration-300"
>
  <div class="container-header flex items-center justify-between">
    <div class="logo-container flex items-center">
      <Logo {...headerLogoProps} />
      <a href="/" class="flex cursor-pointer items-center">
        <!-- <span
          class="text-lg ml-[40px] text-white tracking-wide font-medium uppercase"
        >
          Innovation Agency
        </span> -->
      </a>
    </div>
    <!-- Desktop Navigation -->
    <nav class="desktop-nav">
      {
        links.map((link) => (
          <a
            href={link.href}
            class="font-medium uppercase tracking-wide text-white hover:text-gray-400"
          >
            {link.text}
          </a>
        ))
      }
    </nav>

    <!-- Mobile Hamburger Button -->
    <button class="mobile-nav-toggle hamburger" id="mobile-toggle">
      <div class="line"></div>
      <div class="line"></div>
      <div class="line"></div>
    </button>
  </div>

  <!-- Mobile Navigation Menu -->
  <div class="mobile-nav" id="mobile-nav">
    <nav>
      {
        links.map((link) => (
          <a
            href={link.href}
            class="border-b border-gray-800 py-2 font-medium uppercase tracking-wide text-white hover:text-gray-400"
          >
            {link.text}
          </a>
        ))
      }
    </nav>
  </div>
</header>

<!-- Mobile Navigation Overlay - Outside header to cover full page -->
<div class="mobile-nav-overlay" id="mobile-overlay"></div>

<style>
  header {
    /* background: #13151a;
        background-size: 224px; */
  }
</style>

<script>
  // Header spacer height now handled by CSS only - no JS needed

  // Mobile navigation toggle
  document.addEventListener('DOMContentLoaded', function () {
    const mobileToggle = document.getElementById('mobile-toggle')
    const mobileNav = document.getElementById('mobile-nav')
    const mobileOverlay = document.getElementById('mobile-overlay')
    const header = document.getElementById('header')

    function updateMobileNavPosition() {
      if (header && mobileNav) {
        const headerHeight = header.offsetHeight
        mobileNav.style.top = `${headerHeight}px`
      }
    }

    function closeMobileNav() {
      if (mobileNav && mobileToggle && mobileOverlay) {
        mobileNav.classList.remove('active')
        mobileToggle.classList.remove('active')
        mobileOverlay.classList.remove('active')
        document.body.classList.remove('mobile-nav-open')
      }
    }

    function openMobileNav() {
      if (mobileNav && mobileToggle && mobileOverlay && header) {
        updateMobileNavPosition()
        const headerHeight = header.offsetHeight
        mobileOverlay.style.top = `${headerHeight}px`
        mobileNav.classList.add('active')
        mobileToggle.classList.add('active')
        mobileOverlay.classList.add('active')
        document.body.classList.add('mobile-nav-open')
      }
    }

    function toggleMobileNav() {
      if (mobileNav) {
        const isActive = mobileNav.classList.contains('active')
        if (isActive) {
          closeMobileNav()
        } else {
          openMobileNav()
        }
      }
    }

    if (mobileToggle && mobileNav) {
      mobileToggle.addEventListener('click', toggleMobileNav)

      // Close mobile nav when clicking on a link
      const mobileLinks = mobileNav.querySelectorAll('a')
      mobileLinks.forEach((link) => {
        link.addEventListener('click', closeMobileNav)
      })

      // Close mobile nav when clicking on overlay
      if (mobileOverlay) {
        mobileOverlay.addEventListener('click', closeMobileNav)
      }

      // Close mobile nav when clicking outside
      document.addEventListener('click', function (e) {
        const target = e.target as HTMLElement
        if (
          target &&
          !mobileToggle.contains(target) &&
          !mobileNav.contains(target)
        ) {
          closeMobileNav()
        }
      })

      // Close mobile nav when resizing to desktop view + update position on resize
      window.addEventListener('resize', function () {
        if (window.innerWidth >= 771) {
          closeMobileNav()
        } else {
          updateMobileNavPosition()
        }
      })

      // Update position on initial load
      updateMobileNavPosition()
    }
  })
</script>
