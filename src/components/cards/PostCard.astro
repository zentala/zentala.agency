---
import { getCollection } from 'astro:content'

export interface PostProps {
  title: string
  date: string
  category: string
  imageUrl?: string
  excerpt?: string
  authorVersion?: string
  link: string
}

const {
  title,
  date,
  category,
  excerpt,
  authorVersion = 'pawel-zentala',
  link,
} = Astro.props

// Pobieramy dane autora
const authors = await getCollection('authors')
const authorData = authors[0].data
const author = authorData.find(
  (a: { slug: string }) => a.slug === authorVersion,
)

if (!author) {
  throw new Error(`Author not found for version: ${authorVersion}`)
}
---

<style lang="scss">
  .post-card {
    width: 100%;
    aspect-ratio: 1 / 1;
    overflow: hidden;
  }

  .post-card-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
</style>

<script is:inline>
  function truncateExcerpt() {
    const cards = document.querySelectorAll('.post-card')

    cards.forEach((card) => {
      const excerpt = card.querySelector('[data-excerpt]')
      if (!excerpt) return

      // Store original text if not already stored
      if (!excerpt.dataset.originalText) {
        excerpt.dataset.originalText = excerpt.textContent.trim()
      }

      const originalText = excerpt.dataset.originalText

      // Reset to original text first
      excerpt.textContent = originalText

      // Let the browser render first, then check if we need to truncate
      requestAnimationFrame(() => {
        // Check if excerpt overflows
        const isOverflowing =
          excerpt.scrollHeight > excerpt.offsetHeight ||
          card.scrollHeight > card.offsetHeight

        if (!isOverflowing) {
          // Text fits, no need to truncate
          return
        }

        // Binary search to find the maximum text that fits
        let left = 0
        let right = originalText.length
        let bestFit = originalText

        while (left < right) {
          const mid = Math.floor((left + right + 1) / 2)
          const testText = originalText.slice(0, mid)
          const textWithEllipsis =
            mid < originalText.length ? testText + '…' : testText

          excerpt.textContent = textWithEllipsis

          // Check if this fits
          const cardOverflows = card.scrollHeight > card.offsetHeight
          const excerptOverflows = excerpt.scrollHeight > excerpt.offsetHeight

          if (!cardOverflows && !excerptOverflows) {
            bestFit = textWithEllipsis
            left = mid
          } else {
            right = mid - 1
          }
        }

        excerpt.textContent = bestFit
      })
    })
  }

  // Run on DOM ready and window resize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', truncateExcerpt)
  } else {
    truncateExcerpt()
  }

  window.addEventListener('resize', () => {
    setTimeout(truncateExcerpt, 100) // Small delay for resize
  })
</script>

<article class="card-link">
  <div
    class="padding-responsive-md post-card relative flex min-h-full flex-col items-start"
  >
    <a href={link} class="absolute inset-0 z-0" aria-label={title}></a>
    <div class="flex items-center gap-x-2 text-gray-700">
      <img
        src={author.avatar}
        alt={author.name}
        class="h-5 w-5 rounded-full bg-gray-50"
      />
      <div class="text-sm leading-6">
        <p class="">
          <span class="font text-gray-400">
            <a href={author.profileUrl} class="relative z-10">
              {author.name}
            </a>
          </span>
          <br />
        </p>
      </div>
      ·
      <time datetime={date} class="text-gray-700">{date}</time>
      ·
      <a
        href={`/category/${category}`}
        class="relative z-10 rounded-full px-2 py-1 text-gray-600 hover:text-gray-500"
      >
        {category}
      </a>
    </div>

    <div
      class="group pointer-events-none relative flex min-h-0 w-full flex-1 flex-col"
    >
      <div class="card-content-wrapper card-content-wrapper--large-title">
        <h3 class="mt-3">
          {title}
        </h3>
        {
          excerpt && (
            <p
              class="mt-5 min-h-0 flex-1 overflow-hidden text-ellipsis"
              style="display: -webkit-box; -webkit-box-orient: vertical;"
              data-excerpt
            >
              {excerpt}
            </p>
          )
        }
      </div>
    </div>
  </div>
</article>
