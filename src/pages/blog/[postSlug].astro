---
import { getCollection } from 'astro:content'
import Layout from '../../layouts/Layout.astro'
import TagList from '../../components/TagList.astro'

export async function getStaticPaths() {
  const posts = (await getCollection('blog')).filter(
    (post) => import.meta.env.DEV || post.data.published !== false,
  )
  return posts.map((post) => ({
    params: { postSlug: post.slug },
  }))
}

const { postSlug } = Astro.params
const posts = await getCollection('blog')
const post = posts.find((p) => p.slug === postSlug)

// console.log('Post data:', {
//   slug: postSlug,
//   bannerEnd: post?.data?.bannerEnd,
//   fullPostData: post?.data,
// })

if (!post) {
  throw new Error(`Post not found for slug: ${postSlug}`)
}

const authors = await getCollection('authors')
const authorData = authors[0].data
const author = authorData.find((a) => a.slug === post.data.authorVersion)

if (!author) {
  console.log(
    'Available authors:',
    authorData.map((a) => a.slug),
  )
  throw new Error(`Author not found for version: ${post.data.authorVersion}`)
}

const { Content } = await post.render()
---

<Layout title={post.data.title}>
  <main class="container mx-auto p-16 max-w-8xl border-x border-gray-800">
    <div class="container mx-auto pt-8 pb-16 px-4">
      <!-- <h1 class="text-6xl font-light mb-8 text-white">{post.data.title}</h1> -->

      <div class="flex items-center gap-x-4 mb-8 text-sm">
        <div class="flex items-center gap-x-2">
          <img
            src={author.avatar}
            alt={author.name}
            class="h-8 w-8 rounded-full bg-gray-50"
          />
          <div class="text-gray-400">
            <a href={author.profileUrl} class="hover:text-gray-300">
              {author.name}
            </a>
            {author.role && <p class="text-gray-600 text-xs">{author.role}</p>}
          </div>
        </div>
        <span class="text-gray-600">·</span>
        {
          post.data.category && (
            <>
              <a
                href={`/category/${post.data.category}`}
                class="text-gray-500 hover:text-gray-300"
              >
                {post.data.category}
              </a>
              <span class="text-gray-600">·</span>
            </>
          )
        }
        <time datetime={post.data.date} class="text-gray-500">
          {
            new Date(post.data.date).toLocaleDateString('pl-PL', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })
          }
        </time>
        {
          post.data.readingTime && (
            <>
              <span class="text-gray-600">·</span>
              <span class="text-gray-500">
                {post.data.readingTime} mins reading
              </span>
            </>
          )
        }
      </div>

      {post.data.tags && <TagList tags={post.data.tags} className="mb-8" />}

      <article
        class="prose text-white custom-markdown [&>p]:text-2xl [&>h2]:text-4xl [&>h3]:text-3xl [&>ul]:text-2xl [&>ol]:text-2xl [&>blockquote]:text-2xl"
      >
        <Content />
      </article>

      {
        post.data.bannerEnd &&
          (async () => {
            try {
              const Banner = await import(
                `../../banners/${post.data.bannerEnd}.astro`
              )
              return <Banner.default />
            } catch (error) {
              console.error('Błąd ładowania bannera:', error)
              return null
            }
          })()
      }
    </div>
  </main>
</Layout>
